var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ParserService } from './parser.service.js';
import { got } from 'got';
const rfc3986EncodeURIComponent = (str) => encodeURIComponent(str).replace(/[!'()*]/g, escape);
export function searchVideo(searchQuery) {
    return __awaiter(this, void 0, void 0, function* () {
        const YOUTUBE_URL = 'https://www.youtube.com';
        const results = [];
        let details = [];
        let fetched = false;
        const options = { type: "video", limit: 0 };
        const searchRes = yield got.get(`${YOUTUBE_URL}/results?q=${rfc3986EncodeURIComponent(searchQuery.trim())}&hl=en`);
        let html = yield searchRes.body;
        // try to parse html
        try {
            const data = html.split("ytInitialData = '")[1].split("';</script>")[0];
            // @ts-ignore
            html = data.replace(/\\x([0-9A-F]{2})/ig, (...items) => {
                return String.fromCharCode(parseInt(items[1], 16));
            });
            html = html.replaceAll("\\\\\"", "");
            html = JSON.parse(html);

            console.log('aaa',html);
        }
        catch (e) { /* nothing */ }
        if (html && html.contents && html.contents.sectionListRenderer && html.contents.sectionListRenderer.contents
            && html.contents.sectionListRenderer.contents.length > 0 && html.contents.sectionListRenderer.contents[0].itemSectionRenderer &&
            html.contents.sectionListRenderer.contents[0].itemSectionRenderer.contents.length > 0) {
            details = html.contents.sectionListRenderer.contents[0].itemSectionRenderer.contents;
            fetched = true;
        }
        // backup/ alternative parsing
        if (!fetched) {
            try {
                details = JSON.parse(html.split('{"itemSectionRenderer":{"contents":')[html.split('{"itemSectionRenderer":{"contents":').length - 1].split(',"continuations":[{')[0]);
                fetched = true;
            }
            catch (e) { /* nothing */
            }
        }
        if (!fetched) {
            try {
                details = JSON.parse(html.split('{"itemSectionRenderer":')[html.split('{"itemSectionRenderer":').length - 1].split('},{"continuationItemRenderer":{')[0]).contents;
                fetched = true;
            }
            catch (e) { /* nothing */ }
        }
        if (!fetched)
            return [];
        // tslint:disable-next-line:prefer-for-of
        for (let i = 0; i < details.length; i++) {
            if (typeof options.limit === "number" && options.limit > 0 && results.length >= options.limit)
                break;
            const data = details[i];
            const parserService = new ParserService();
            const parsed = parserService.parseVideo(data);
            if (!parsed)
                continue;
            const res = parsed;
            results.push(res);
        }
        return results;
    });
}
